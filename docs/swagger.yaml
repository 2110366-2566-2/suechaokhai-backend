basePath: /
definitions:
  enums.BankNames:
    enum:
    - KBANK
    - BBL
    - KTB
    - BAY
    - CIMB
    - TTB
    - SCB
    - GSB
    - ""
    type: string
    x-enum-comments:
      BAY: '"BANK OF AYUDHYA"'
      BBL: '"BANGKOK BANK"'
      CIMB: '"CIMB THAI BANK"'
      GSB: '"GOVERNMENT SAVINGS BANK"'
      KBANK: '"KASIKORN BANK"'
      KTB: '"KRUNG THAI BANK"'
      "NULL": '"BANK NOT SELECTED"'
      SCB: '"SIAM COMMERCIAL BANK"'
      TTB: '"TMBTHANACHART BANK"'
    x-enum-varnames:
    - KBANK
    - BBL
    - KTB
    - BAY
    - CIMB
    - TTB
    - SCB
    - GSB
    - "NULL"
  enums.CardColors:
    enum:
    - LIGHT BLUE
    - BLUE
    - DARK BLUE
    - VERY DARK BLUE
    type: string
    x-enum-varnames:
    - LIGHT_BLUE
    - BLUE
    - DARK_BLUE
    - VERY_DARK_BLUE
  enums.FloorSizeUnits:
    enum:
    - sqm
    - sqft
    type: string
    x-enum-varnames:
    - SQM
    - SQFT
  enums.Furnishing:
    enum:
    - UNFURNISHED
    - PARTIALLY FURNISHED
    - FULLY FURNISHED
    - READY TO MOVE IN
    type: string
    x-enum-varnames:
    - UNFURNISHED
    - PARTIALLY_FURNISHED
    - FULLY_FURNISHED
    - READY_TO_MOVE_IN
  enums.PropertyTypes:
    enum:
    - CONDOMINIUM
    - APARTMENT
    - SEMI-DETACHED HOUSE
    - HOUSE
    - SERVICED APARTMENT
    - TOWNHOUSE
    type: string
    x-enum-varnames:
    - CONDOMINIUM
    - APARTMENT
    - SEMI_DETACHED_HOUSE
    - HOUSE
    - SERVICED_APARTMENT
    - TOWNHOUSE
  enums.RegisteredTypes:
    enum:
    - EMAIL
    - GOOGLE
    type: string
    x-enum-varnames:
    - EMAIL
    - GOOGLE
  enums.SessionType:
    enum:
    - REGISTER
    - LOGIN
    type: string
    x-enum-varnames:
    - SessionRegister
    - SessionLogin
  models.Agreements:
    properties:
      agreement_date:
        type: string
      agreement_id:
        type: string
      created_at:
        type: string
      dweller_user_id:
        type: string
      owner_user_id:
        type: string
      property_id:
        type: string
    type: object
  models.Appointments:
    properties:
      appointment_date:
        example: "2024-02-18T11:00:00Z"
        type: string
      appointment_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      created_at:
        type: string
      dweller_user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      owner_user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      property_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.AppointmentsStatus'
        example: PENDING
    type: object
  models.AppointmentsStatus:
    enum:
    - PENDING
    - APPROVED
    - REJECTED
    - REQUEST_CHANGE
    - CANCELLED
    - COMPLETED
    type: string
    x-enum-varnames:
    - Pending
    - Approved
    - Rejected
    - RequestChange
    - Cancelled
    - Completed
  models.CallbackResponses:
    properties:
      email:
        example: johnd@email.com
        type: string
      registered_type:
        allOf:
        - $ref: '#/definitions/enums.RegisteredTypes'
        example: EMAIL / GOOGLE
      session_type:
        allOf:
        - $ref: '#/definitions/enums.SessionType'
        example: REGISTER / LOGIN
    type: object
  models.ChatPreviews:
    properties:
      content:
        example: hello, world
        type: string
      unread_messages:
        example: 9
        type: integer
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  models.CreatingAppointments:
    properties:
      appointment_dates:
        example:
        - "2024-02-18T11:00:00Z"
        items:
          type: string
        type: array
      dweller_user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      owner_user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      property_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  models.CreditCards:
    properties:
      card_color:
        allOf:
        - $ref: '#/definitions/enums.CardColors'
        example: BLUE
      card_nickname:
        example: John's Card
        type: string
      card_number:
        example: "1234567890123456"
        type: string
      cardholder_name:
        example: John Doe
        type: string
      cvv:
        example: "123"
        type: string
      expire_month:
        example: "12"
        type: string
      expire_year:
        example: "2023"
        type: string
      tag_number:
        example: 1
        type: integer
    type: object
  models.DeletingAppointments:
    properties:
      appointmentIds:
        example:
        - 123e4567-e89b-12d3-a456-426614174000
        items:
          type: string
        type: array
    type: object
  models.ErrorResponses:
    properties:
      code:
        example: 500
        type: integer
      message:
        example: internal server error
        type: string
      name:
        example: internal-server-error
        type: string
    type: object
  models.Greetings:
    properties:
      message:
        example: Hello, World
        type: string
    type: object
  models.MessageResponses:
    properties:
      message:
        example: Message sent successfully
        type: string
    type: object
  models.Messages:
    properties:
      content:
        example: hello, world
        type: string
      message_id:
        example: 27b79b15-a56f-464a-90f7-bab515ba4c02
        type: string
      read_at:
        example: "2024-02-22T03:06:53.313735Z"
        type: string
      receiver_id:
        example: 27b79b15-a56f-464a-90f7-bab515ba4c02
        type: string
      sender_id:
        example: 27b79b15-a56f-464a-90f7-bab515ba4c02
        type: string
      sent_at:
        example: "2024-02-22T03:06:53.313735Z"
        type: string
    type: object
  models.Properties:
    properties:
      address:
        example: 123/4
        type: string
      alley:
        example: Pattaya Nua 78
        type: string
      bathrooms:
        example: 2
        type: integer
      bedrooms:
        example: 3
        type: integer
      country:
        example: Thailand
        type: string
      created_at:
        type: string
      district:
        example: Bang Phli
        type: string
      floor:
        example: 5
        type: integer
      floor_size:
        example: 123.45
        type: number
      floor_size_unit:
        allOf:
        - $ref: '#/definitions/enums.FloorSizeUnits'
        example: SQM
      furnishing:
        allOf:
        - $ref: '#/definitions/enums.Furnishing'
        example: UNFURNISHED
      images:
        items:
          $ref: '#/definitions/models.PropertyImages'
        type: array
      owner_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      postal_code:
        example: "69096"
        type: string
      property_description:
        example: Et sequi dolor praes
        type: string
      property_name:
        example: Supalai
        type: string
      property_type:
        allOf:
        - $ref: '#/definitions/enums.PropertyTypes'
        example: CONDOMINIUM
      propertyId:
        type: string
      province:
        example: Pattaya
        type: string
      renting:
        $ref: '#/definitions/models.RentingProperties'
      selling:
        $ref: '#/definitions/models.SellingProperties'
      street:
        example: Pattaya
        type: string
      sub_district:
        example: Bang Bon
        type: string
      unit_number:
        example: 123
        type: integer
    type: object
  models.PropertyImages:
    properties:
      created_at:
        type: string
      url:
        example: https://image_url.com/abcd
        type: string
    type: object
  models.RentingProperties:
    properties:
      created_at:
        type: string
      is_occupied:
        example: true
        type: boolean
      price_per_month:
        example: 12345.67
        type: number
    type: object
  models.SellingProperties:
    properties:
      created_at:
        type: string
      is_sold:
        example: true
        type: boolean
      price:
        example: 12345.67
        type: number
    type: object
  models.SendingEmailRequests:
    properties:
      emails:
        items:
          type: string
        type: array
    type: object
  models.Sessions:
    properties:
      email:
        example: admim@email.com
        type: string
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  models.UserFinancialInformations:
    properties:
      bank_account_number:
        example: "1234567890"
        type: string
      bank_name:
        allOf:
        - $ref: '#/definitions/enums.BankNames'
        example: KBANK
      created_at:
        type: string
      credit_cards:
        items:
          $ref: '#/definitions/models.CreditCards'
        type: array
    type: object
  models.Users:
    properties:
      created_at:
        type: string
      email:
        example: email@email.com
        type: string
      first_name:
        example: John
        type: string
      is_verified:
        example: false
        type: boolean
      last_name:
        example: Doe
        type: string
      password:
        example: password1234
        type: string
      phone_number:
        example: "0812345678"
        type: string
      profile_image_url:
        example: https://image_url.com/abcd
        type: string
      registered_type:
        allOf:
        - $ref: '#/definitions/enums.RegisteredTypes'
        example: EMAIL
      user_id:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: Bangkok Property Matchmaking Platform API docs
  title: Bangkok Property Matchmaking Platform
  version: "1.0"
paths:
  /api/v1/agreement/:agreementId:
    delete:
      description: Delete an agreement by its id
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Delete an agreement
      tags:
      - agreements
    get:
      description: Get an agreement by its id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Agreements'
        "400":
          description: Invalid agreement id
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "404":
          description: Agreement not found
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get agreement by id
      tags:
      - agreements
  /api/v1/agreements:
    get:
      description: Get all agreements
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Agreements'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get all agreements
      tags:
      - agreements
    post:
      description: Create an agreement by parsing the body
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Create an agreement
      tags:
      - agreements
  /api/v1/agreements/dweller/:userId:
    get:
      description: Get all agreements by dweller id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Agreements'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get agreements by dweller id
      tags:
      - agreements
  /api/v1/agreements/owner/:userId:
    get:
      description: Get all agreements by owner id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Agreements'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get agreements by owner id
      tags:
      - agreements
  /api/v1/appointments:
    get:
      description: Get all appointments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Appointments'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get all appointments
      tags:
      - appointments
    post:
      description: Create appointments
      parameters:
      - description: Appointment details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreatingAppointments'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Appointments'
        "400":
          description: Empty dates or some of appointments duplicate with existing
            one
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Create appointments
      tags:
      - appointments
  /api/v1/appointments/:
    delete:
      description: Delete **all appointments** in body.
      parameters:
      - description: Appointment id deleting lists
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.DeletingAppointments'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Appointments'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Delete appointments
      tags:
      - appointments
  /api/v1/appointments/:appointmentId:
    get:
      description: Get appointments by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Appointments'
            type: array
        "400":
          description: Invalid appointment id
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "404":
          description: Appointment id not found
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get appointments by id
      tags:
      - appointments
    patch:
      description: Update appointment status
      parameters:
      - description: Appointment id deleting lists
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.DeletingAppointments'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Appointments'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Update appointment status
      tags:
      - appointments
  /api/v1/auth/callback:
    get:
      description: Callback from google / register redirect. Basically put all query
        strings to this request.
      parameters:
      - in: query
        name: code
        type: string
      - in: query
        name: email
        type: string
      - in: query
        name: state
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CallbackResponses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Callback
      tags:
      - auth
  /api/v1/chats:
    get:
      description: Get current users chat
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ChatPreviews'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get current users chat *use cookies*
      tags:
      - chats
  /api/v1/chats/:recvUserId:
    get:
      description: Get messages chatting with recvUserId. Pagination is available.
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: default 50, max 50
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Messages'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get messages in a chat with recvUserId *use cookies*
      tags:
      - chats
  /api/v1/email:
    post:
      description: Send a verification email to the user
      parameters:
      - description: User email address
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SendingEmailRequests'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponses'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Send verification email
      tags:
      - emails
  /api/v1/greeting:
    get:
      description: says hello, world
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Greetings'
      summary: Greeting
      tags:
      - greeting
  /api/v1/login:
    post:
      description: Login with email and password
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Properties'
        "400":
          description: Empty or invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "401":
          description: Password mismatch
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Login with email
      tags:
      - auth
  /api/v1/logout:
    post:
      description: Logout
      responses:
        "200":
          description: OK
      summary: Logout
      tags:
      - auth
  /api/v1/oauth/google:
    get:
      description: Redirect to this endpoint to login with Google OAuth2. When logging
        in is completed, the redirection to /register in client will occur.
      responses:
        "307":
          description: Temporary Redirect
        "500":
          description: Internal Server Error
          schema:
            type: model
      summary: Login with Google
      tags:
      - auth
  /api/v1/properties:
    get:
      description: Get all properties or search properties by query
      parameters:
      - description: Search query
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Properties'
            type: array
        "500":
          description: Could not get properties
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get or search properties
      tags:
      - property
  /api/v1/properties/top10:
    get:
      description: Get top 10 properties with the most favorites, sorted by the number
        of favorites then by the newest properties
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Properties'
            type: array
        "500":
          description: Could not get top 10 properties
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get top 10 properties
      tags:
      - property
  /api/v1/property:
    post:
      description: Create a property with the provided details
      parameters:
      - description: Property details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Properties'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Properties'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "403":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "404":
          description: Property id not found
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Could not create property
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Create a property
      tags:
      - property
  /api/v1/property/:propertyId:
    delete:
      description: Delete a property, owned by the current user, by its id
      parameters:
      - description: Property id
        in: path
        name: propertyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Property deleted
          schema:
            $ref: '#/definitions/models.MessageResponses'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "403":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "404":
          description: Property id not found
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Could not delete property
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Delete a property
      tags:
      - property
    get:
      description: Get property by its id
      parameters:
      - description: Property id
        in: path
        name: propertyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Properties'
        "400":
          description: Invalid property id
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "404":
          description: Property id not found
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get property by propertyId
      tags:
      - property
    post:
      description: Add property to the current user favorites
      parameters:
      - description: Property id
        in: path
        name: propertyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Property added to favorites
          schema:
            $ref: '#/definitions/models.MessageResponses'
        "403":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "404":
          description: Property id not found
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Could not add favorite property
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Add property to favorites
      tags:
      - property
    put:
      description: Update a property, owned by the current user, by its id with the
        provided details
      parameters:
      - description: Property id
        in: path
        name: propertyId
        required: true
        type: string
      - description: Property details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Properties'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Properties'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "403":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "404":
          description: Property id not found
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Could not update property
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Update a property
      tags:
      - property
  /api/v1/property/favorites/:propertyId:
    delete:
      description: Remove property to the current user favorites
      parameters:
      - description: Property id
        in: path
        name: propertyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Property removed from favorites
          schema:
            $ref: '#/definitions/models.MessageResponses'
        "403":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "404":
          description: Property id not found
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Could not remove favorite property
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Remove property to favorites
      tags:
      - property
  /api/v1/register:
    post:
      description: Create user with formData **\***upload profile image in formData
        with field `profile_image`. Available formats are .png / .jpg / .jpeg
      parameters:
      - example: email@email.com
        in: formData
        name: email
        type: string
      - example: John
        in: formData
        name: first_name
        type: string
      - example: Doe
        in: formData
        name: last_name
        type: string
      - example: password1234
        in: formData
        name: password
        type: string
      - example: "0812345678"
        in: formData
        name: phone_number
        type: string
      - enum:
        - EMAIL
        - GOOGLE
        in: formData
        name: registered_type
        type: string
        x-enum-varnames:
        - EMAIL
        - GOOGLE
      produces:
      - application/json
      responses:
        "200":
          description: User created
          schema:
            $ref: '#/definitions/models.MessageResponses'
        "400":
          description: Invalid user info
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Could not create user
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Register *use cookies*
      tags:
      - users
  /api/v1/user/:userId:
    delete:
      description: Delete a user by its id
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            $ref: '#/definitions/models.MessageResponses'
        "400":
          description: Invalid user id
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Delete user by id  *use cookies*
      tags:
      - users
    get:
      description: Get a user by its id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Users'
        "400":
          description: Invalid user id
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get user by id
      tags:
      - users
  /api/v1/user/greeting:
    get:
      description: says hello to current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Greetings'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Greeting with auth required *use cookies*
      tags:
      - greeting
  /api/v1/user/me:
    get:
      description: Get current user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Users'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get current user info *use cookies*
      tags:
      - users
  /api/v1/user/me/favorites:
    get:
      description: Get all properties that the current user has added to favorites
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Properties'
            type: array
        "403":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Could not get favorite properties
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get my favorite properties
      tags:
      - property
  /api/v1/user/me/financial-information:
    get:
      description: Get current user financial information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserFinancialInformations'
        "400":
          description: Invalid user id
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "403":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get current user financial information *use cookies*
      tags:
      - users
    put:
      description: Update the current user financial information with data from the
        body
      parameters:
      - description: User financial information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UserFinancialInformations'
      produces:
      - application/json
      responses:
        "200":
          description: User financial information updated
          schema:
            $ref: '#/definitions/models.MessageResponses'
        "400":
          description: Invalid user financial information
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "403":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Could not update user financial information
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Update the current user financial information *use cookies*
      tags:
      - users
  /api/v1/user/me/personal-information:
    put:
      description: Update specifying userId with formData **\***upload profile image
        in formData with field `profile_image`. Available formats are .png / .jpg
        / .jpeg
      parameters:
      - example: John
        in: formData
        name: first_name
        type: string
      - example: Doe
        in: formData
        name: last_name
        type: string
      - example: "0812345678"
        in: formData
        name: phone_number
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User personal information updated
          schema:
            $ref: '#/definitions/models.MessageResponses'
        "400":
          description: Invalid user info
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Could not update user
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Update current user personal information *use cookies*
      tags:
      - users
  /api/v1/user/me/properties:
    get:
      description: Get all properties owned by the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Properties'
            type: array
        "403":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponses'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get my properties
      tags:
      - property
  /api/v1/user/me/registered:
    get:
      description: Get user registered type
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Sessions'
      summary: Get user registered type *use cookies*
      tags:
      - users
  /api/v1/user/me/verify:
    post:
      description: Verify user by citizen id and citizen id image
      parameters:
      - example: "1100111111111"
        in: formData
        name: citizen_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Verified
          schema:
            $ref: '#/definitions/models.MessageResponses'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Verify user *use cookies*
      tags:
      - users
  /api/v1/users:
    get:
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Users'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponses'
      summary: Get all users
      tags:
      - users
swagger: "2.0"
