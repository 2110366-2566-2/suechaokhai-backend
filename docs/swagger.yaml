basePath: /
definitions:
  enums.BankName:
    enum:
    - KASIKORN BANK
    - BANGKOK BANK
    - KRUNG THAI BANK
    - BANK OF AYUDHYA
    - CIMB THAI BANK
    - TMBTHANACHART BANK
    - SIAM COMMERCIAL BANK
    - GOVERNMENT SAVINGS BANK
    - BANK NOT SELECTED
    type: string
    x-enum-varnames:
    - KBANK
    - BBL
    - KTB
    - BAY
    - CIMB
    - TTB
    - SCB
    - GSB
    - "NULL"
  enums.RegisteredType:
    enum:
    - EMAIL
    - GOOGLE
    type: string
    x-enum-varnames:
    - EMAIL
    - GOOGLE
  models.Agreement:
    properties:
      agreement_date:
        type: string
      agreement_id:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      dweller_user_id:
        type: string
      owner_user_id:
        type: string
      property_id:
        type: string
      updatedAt:
        type: string
    type: object
  models.Appointments:
    properties:
      appointment_date:
        example: "2024-02-18T11:00:00Z"
        type: string
      appointment_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      created_at:
        type: string
      dweller_user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      owner_user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      property_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.AppointmentsStatus'
        example: PENDING
    type: object
  models.AppointmentsStatus:
    enum:
    - PENDING
    - APPROVED
    - REJECTED
    - REQUEST_CHANGE
    - CANCELLED
    - COMPLETED
    type: string
    x-enum-varnames:
    - Pending
    - Approved
    - Rejected
    - RequestChange
    - Cancelled
    - Completed
  models.CreatingAppointments:
    properties:
      appointment_dates:
        example:
        - "2024-02-18T11:00:00Z"
        items:
          type: string
        type: array
      dweller_user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      owner_user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      property_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  models.DeletingAppointments:
    properties:
      appointmentIds:
        example:
        - 123e4567-e89b-12d3-a456-426614174000
        items:
          type: string
        type: array
    type: object
  models.ErrorResponse:
    properties:
      code:
        example: 500
        type: integer
      message:
        example: internal server error
        type: string
      name:
        example: internal-server-error
        type: string
    type: object
  models.Greeting:
    properties:
      message:
        example: Hello, World
        type: string
    type: object
  models.Property:
    properties:
      address:
        example: 123/4
        type: string
      alley:
        example: Pattaya Nua 78
        type: string
      country:
        example: Thailand
        type: string
      created_at:
        type: string
      description:
        example: Et sequi dolor praes
        type: string
      district:
        example: Bang Phli
        type: string
      images:
        items:
          $ref: '#/definitions/models.PropertyImage'
        type: array
      owner_id:
        description: foreign key
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      postal_code:
        example: "69096"
        type: string
      project_name:
        example: Supalai
        type: string
      propertyId:
        type: string
      province:
        example: Pattaya
        type: string
      renting:
        $ref: '#/definitions/models.RentingProperty'
      residential_type:
        example: Condo
        type: string
      selling:
        $ref: '#/definitions/models.SellingProperty'
      street:
        example: Pattaya
        type: string
      sub_district:
        example: Bang Bon
        type: string
    type: object
  models.PropertyImage:
    properties:
      created_at:
        type: string
      url:
        example: https://image_url.com/abcd
        type: string
    type: object
  models.RentingProperty:
    properties:
      created_at:
        type: string
      is_occupied:
        example: true
        type: boolean
      price_per_month:
        example: 12345.67
        type: number
    type: object
  models.SellingProperty:
    properties:
      created_at:
        type: string
      is_sold:
        example: true
        type: boolean
      price:
        example: 12345.67
        type: number
    type: object
  models.Session:
    properties:
      email:
        example: admim@email.com
        type: string
      registered_type:
        allOf:
        - $ref: '#/definitions/enums.RegisteredType'
        example: EMAIL / GOOGLE
      session_type:
        allOf:
        - $ref: '#/definitions/models.SessionType'
        example: LOGIN / REGISTER
    type: object
  models.SessionType:
    enum:
    - REGISTER
    - LOGIN
    type: string
    x-enum-varnames:
    - SessionRegister
    - SessionLogin
  models.Users:
    properties:
      bank_account_number:
        example: "1234567890"
        type: string
      bank_name:
        allOf:
        - $ref: '#/definitions/enums.BankName'
        example: KBANK
      citizen_card_image_url:
        example: https://image_url.com/abcd
        type: string
      citizen_id:
        example: "1234567890123"
        type: string
      created_at:
        type: string
      credit_card_cvv:
        example: "123"
        type: string
      credit_card_expiration_month:
        example: "12"
        type: string
      credit_card_expiration_year:
        example: "2023"
        type: string
      credit_card_number:
        example: "1234567890123456"
        type: string
      credit_cardholder_name:
        example: JOHN DOE
        type: string
      email:
        example: email@email.com
        type: string
      first_name:
        example: John
        type: string
      is_verified:
        example: false
        type: boolean
      last_name:
        example: Doe
        type: string
      password:
        example: password1234
        type: string
      phone_number:
        example: "0812345678"
        type: string
      profile_image_url:
        example: https://image_url.com/abcd
        type: string
      registered_type:
        allOf:
        - $ref: '#/definitions/enums.RegisteredType'
        example: EMAIL
      user_id:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: Bangkok Property Matchmaking Platform API docs
  title: Bangkok Property Matchmaking Platform
  version: "1.0"
paths:
  /api/v1/agreement/:agreementId:
    delete:
      description: Delete an agreement by its id
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete an agreement
      tags:
      - agreements
    get:
      description: Get an agreement by its id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Agreement'
        "400":
          description: Invalid agreement id
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Agreement not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get agreement by id
      tags:
      - agreements
  /api/v1/agreements:
    get:
      description: Get all agreements
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Agreement'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all agreements
      tags:
      - agreements
    post:
      description: Create an agreement by parsing the body
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create an agreement
      tags:
      - agreements
  /api/v1/agreements/dweller/:userId:
    get:
      description: Get all agreements by dweller id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Agreement'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get agreements by dweller id
      tags:
      - agreements
  /api/v1/agreements/owner/:userId:
    get:
      description: Get all agreements by owner id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Agreement'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get agreements by owner id
      tags:
      - agreements
  /api/v1/appointments:
    get:
      description: Get all appointments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Appointments'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all appointments
      tags:
      - appointments
    post:
      description: Create appointments
      parameters:
      - description: Appointment details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreatingAppointments'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Appointments'
        "400":
          description: Empty dates or some of appointments duplicate with existing
            one
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create appointments
      tags:
      - appointments
  /api/v1/appointments/:
    delete:
      description: Delete **all appointments** in body.
      parameters:
      - description: Appointment id deleting lists
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.DeletingAppointments'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Appointments'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete appointments
      tags:
      - appointments
  /api/v1/appointments/:appointmentId:
    get:
      description: Get appointments by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Appointments'
            type: array
        "400":
          description: Invalid appointment id
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Appointment id not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get appointments by id
      tags:
      - appointments
    patch:
      description: Update appointment status
      parameters:
      - description: Appointment id deleting lists
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.DeletingAppointments'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Appointments'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update appointment status
      tags:
      - appointments
  /api/v1/greeting:
    get:
      description: says hello, world
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Greeting'
      summary: Greeting
      tags:
      - greeting
  /api/v1/login:
    post:
      description: Login with email and password
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Property'
        "400":
          description: Empty or invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Password mismatch
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login with email
      tags:
      - auth
  /api/v1/logout:
    post:
      description: Logout
      responses:
        "200":
          description: OK
      summary: Logout
      tags:
      - auth
  /api/v1/oauth/google:
    get:
      description: Redirect to this endpoint to login with Google OAuth2. When logging
        in is completed, the redirection to /register in client will occur.
      responses:
        "307":
          description: Temporary Redirect
      summary: Login with Google
      tags:
      - auth
  /api/v1/properties:
    get:
      description: If a query parameter is provided, search properties by project
        name or description. Otherwise, get all properties.
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Property'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all properties or search properties
      tags:
      - property
  /api/v1/property/:id:
    get:
      description: Get property by its id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Property'
        "400":
          description: Invalid property id
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Property id not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get property by id
      tags:
      - property
  /api/v1/register:
    post:
      description: Create a user by prasing the body
      parameters:
      - example: "1234567890"
        in: formData
        name: bank_account_number
        type: string
      - enum:
        - KASIKORN BANK
        - BANGKOK BANK
        - KRUNG THAI BANK
        - BANK OF AYUDHYA
        - CIMB THAI BANK
        - TMBTHANACHART BANK
        - SIAM COMMERCIAL BANK
        - GOVERNMENT SAVINGS BANK
        - BANK NOT SELECTED
        example: KBANK
        in: formData
        name: bank_name
        type: string
        x-enum-varnames:
        - KBANK
        - BBL
        - KTB
        - BAY
        - CIMB
        - TTB
        - SCB
        - GSB
        - "NULL"
      - example: https://image_url.com/abcd
        in: formData
        name: citizen_card_image_url
        type: string
      - example: "1234567890123"
        in: formData
        name: citizen_id
        type: string
      - in: formData
        name: created_at
        type: string
      - example: "123"
        in: formData
        name: credit_card_cvv
        type: string
      - example: "12"
        in: formData
        name: credit_card_expiration_month
        type: string
      - example: "2023"
        in: formData
        name: credit_card_expiration_year
        type: string
      - example: "1234567890123456"
        in: formData
        name: credit_card_number
        type: string
      - example: JOHN DOE
        in: formData
        name: credit_cardholder_name
        type: string
      - example: email@email.com
        in: formData
        name: email
        type: string
      - example: John
        in: formData
        name: first_name
        type: string
      - example: false
        in: formData
        name: is_verified
        type: boolean
      - example: Doe
        in: formData
        name: last_name
        type: string
      - example: password1234
        in: formData
        name: password
        type: string
      - example: "0812345678"
        in: formData
        name: phone_number
        type: string
      - example: https://image_url.com/abcd
        in: formData
        name: profile_image_url
        type: string
      - enum:
        - EMAIL
        - GOOGLE
        example: EMAIL
        in: formData
        name: registered_type
        type: string
        x-enum-varnames:
        - EMAIL
        - GOOGLE
      - in: formData
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Users'
        "400":
          description: Invalid user info
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register *use cookies*
      tags:
      - users
  /api/v1/user/:userId:
    delete:
      description: Delete a user by its id
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid user id
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete user by id
      tags:
      - users
    get:
      description: Get a user by its id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Users'
        "400":
          description: Invalid user id
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get user by id
      tags:
      - users
    put:
      description: Update a user with the given id by parsing the body
      parameters:
      - example: "1234567890"
        in: formData
        name: bank_account_number
        type: string
      - enum:
        - KASIKORN BANK
        - BANGKOK BANK
        - KRUNG THAI BANK
        - BANK OF AYUDHYA
        - CIMB THAI BANK
        - TMBTHANACHART BANK
        - SIAM COMMERCIAL BANK
        - GOVERNMENT SAVINGS BANK
        - BANK NOT SELECTED
        example: KBANK
        in: formData
        name: bank_name
        type: string
        x-enum-varnames:
        - KBANK
        - BBL
        - KTB
        - BAY
        - CIMB
        - TTB
        - SCB
        - GSB
        - "NULL"
      - example: https://image_url.com/abcd
        in: formData
        name: citizen_card_image_url
        type: string
      - example: "1234567890123"
        in: formData
        name: citizen_id
        type: string
      - in: formData
        name: created_at
        type: string
      - example: "123"
        in: formData
        name: credit_card_cvv
        type: string
      - example: "12"
        in: formData
        name: credit_card_expiration_month
        type: string
      - example: "2023"
        in: formData
        name: credit_card_expiration_year
        type: string
      - example: "1234567890123456"
        in: formData
        name: credit_card_number
        type: string
      - example: JOHN DOE
        in: formData
        name: credit_cardholder_name
        type: string
      - example: email@email.com
        in: formData
        name: email
        type: string
      - example: John
        in: formData
        name: first_name
        type: string
      - example: false
        in: formData
        name: is_verified
        type: boolean
      - example: Doe
        in: formData
        name: last_name
        type: string
      - example: password1234
        in: formData
        name: password
        type: string
      - example: "0812345678"
        in: formData
        name: phone_number
        type: string
      - example: https://image_url.com/abcd
        in: formData
        name: profile_image_url
        type: string
      - enum:
        - EMAIL
        - GOOGLE
        example: EMAIL
        in: formData
        name: registered_type
        type: string
        x-enum-varnames:
        - EMAIL
        - GOOGLE
      - in: formData
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Users'
        "400":
          description: Invalid user info
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update user by id
      tags:
      - users
  /api/v1/user/greeting:
    get:
      description: says hello to current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Greeting'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Greeting with auth required *use cookies*
      tags:
      - greeting
  /api/v1/user/me:
    get:
      description: Get current user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Users'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get current user info *use cookies*
      tags:
      - users
  /api/v1/user/me/registered:
    get:
      description: Get user registered type
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Session'
      summary: Get user registered type *use cookies*
      tags:
      - users
  /api/v1/users:
    get:
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Users'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all users
      tags:
      - users
swagger: "2.0"
